// 最优账单平衡
// 给你一个表示交易的数组 transactions
// 其中 transactions[i] = [fromi, toi, amounti]
// 表示 ID = fromi 的人给 ID = toi 的人共计 amounti
// 请你计算并返回还清所有债务的最小交易笔数
// 测试链接 : https://leetcode.cn/problems/optimal-account-balancing/
#include<bits/stdc++.h>
using namespace std;
const int INF = 0x3f3f3f3f;

int n, m, a[100], cnt, dp[3000000];

int f(int status, int rest) {
	if (status == 0)return 0;
	if (dp[status] != -1)return dp[status];
	int ans = 0;
	for (int i = 0;i < cnt;i++) {
		if ((status & (1 << i)) != 0) {
			if (rest + a[i] != 0)ans = max(ans, f(status ^ (1 << i), rest + a[i]));
			else ans = max(ans, f(status ^ (1 << i), 0) + 1);
		}
	}
	dp[status] = ans;
	return ans;
}

int main() {
	/*cin >> n >> m;
	for (int i = 1;i <= n;i++) {
		int u, v, w;
		cin >> u >> v >> w;
		a[u] -= w;a[v] += w;
	}
	for (int i = 1;i <= m;i++) {
		if (!a[i])a[cnt++] = a[i];
	}*/
	cin >> cnt;
	for (int i = 0;i < cnt;i++) {
		cin >> a[i];
	}
	for (int i = 0;i < (1 << cnt);i++) {
		dp[i] = -1;
	}
	cout << f((1 << cnt) - 1, 0) << "\n";
	//cout << dp[0] << " " << dp[1] << " " << dp[2] << " " << dp[3] << " " << dp[4] << " " << dp[5] << " ";
	return 0;
}
